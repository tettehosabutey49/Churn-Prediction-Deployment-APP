st.title("Telcos DatabaseüóÑÔ∏è")

# Creating a DataFrame for data information
data_info = {
    "Column": ["CustomerID", "Gender", "SeniorCitizen", "Partner", "Dependents", "Tenure", 
               "PhoneService", "MultipleLines", "InternetService", "OnlineSecurity", 
               "Online Backup", "Device Protection", "Tech SUpport", "StreamingTV", "Streaming Movies", "Contract", "Paperless Billing", "Payment Method", "Montly Charges", "Total Charges", "Churn"],
    "Description": ["Unique Customer ID", "Male or Female", "0, 1, 2, 3", "Yes or No", "Yes or No", "Yes or No", "Number of Years at company", "Yes or No", 
                    "Yes or No", "Yes or No", "DSL, Fiber Optic", "Yes or No", "Yes or No", "Yes or No", "Yes or No","One Year, Month to Moth, Two years", "Yes or No", "Mailed Check, Credit card, Electronic check, Bank transfer", 
                    "Charges per month", "total charges throughout contract", "Yes or No"    
                    ]
}

df_info = pd.DataFrame(data_info)

# Displaying the DataFrame as a table
st.text("Data Information")
st.table(df_info)

## Creating a connection to the database 
## Querying the database
@st.cache_resource(show_spinner="Connecting to database...")
def init_connection():
    return pyodbc.connect(
        "DRIVER={SQL Server};SERVER="
        + st.secrets["server"]
        + ";DATABASE="
        + st.secrets["database"]
        + ";UID="
        + st.secrets["username"]
        + ";PWD="
        + st.secrets["password"]
    )

connection = init_connection()

@st.cache_data(show_spinner="Running query...")
def running_query(query):
    with connection.cursor() as cursor:
        cursor.execute(query)
        rows = cursor.fetchall()
        df = pd.DataFrame.from_records(rows, columns=[column[0] for column in cursor.description])
    return df
def get_all_column():
    sql_query = """SELECT * FROM LP2_Telco_churn_first_3000"""
    df = running_query(sql_query)
    return df


 #Main script to display the data
df = get_all_column()

st.markdown("<h2 style='font-size:24px;'>Churn Distribution</h2>", unsafe_allow_html=True)
##Main script to display the data
df = get_all_column()

# Create a pie chart
fig1, ax1 = plt.subplots()
churn_counts = df['Churn'].value_counts()
ax1.pie(churn_counts, labels=churn_counts.index, autopct='%1.1f%%',explode=(0.05,0.005), colors=['brown', 'grey'])
ax1.set_title('Churn Distribution')

# Create a second pie chart
fig2, ax2 = plt.subplots()
gender_churn_counts = df.groupby("gender")["Churn"].value_counts().unstack().fillna(0)
gender_churn_counts.plot(kind='bar', stacked=True, ax=ax2, color=['brown', 'grey'])
ax2.set_title('Churn Distribution by Gender')

# Display the plots side by side
col1, col2 = st.columns(2)
with col1:
    st.pyplot(fig1)

with col2:
    st.pyplot(fig2)


    history page
import streamlit as st
import joblib
import pandas as pd
from datetime import datetime

# Set page configuration
st.set_page_config(
    page_title="Predict Page",
    page_icon="üîÆ",
    layout="wide"
)

if "gender" not in st.session_state:
    st.session_state["gender"] = None
if "senior_citizen" not in st.session_state:
    st.session_state["senior_citizen"] = None
if "partner" not in st.session_state:
    st.session_state["partner"] = None
if "dependents" not in st.session_state:
    st.session_state["dependents"] = None
if "tenure" not in st.session_state:
    st.session_state["tenure"] = None
if "phone_service" not in st.session_state:
    st.session_state["phone_service"] = None
if "multiple_lines" not in st.session_state:
    st.session_state["multiple_lines"] = None
if "internet_service" not in st.session_state:
    st.session_state["internet_service"] = None
if "online_security" not in st.session_state:
    st.session_state["online_security"] = None
if "online_backup" not in st.session_state:
    st.session_state["online_backup"] = None
if "device_protection" not in st.session_state:
    st.session_state["device_protection"] = None
if "tech_support" not in st.session_state:
    st.session_state["tech_support"] = None
if "streaming_tv" not in st.session_state:
    st.session_state["streaming_tv"] = None
if "streaming_movies" not in st.session_state:
    st.session_state["streaming_movies"] = None
if "contract" not in st.session_state:
    st.session_state["contract"] = None
if "paperless_billing" not in st.session_state:
    st.session_state["paperless_billing"] = None
if "payment_method" not in st.session_state:
    st.session_state["payment_method"] = None
if "monthly_charges" not in st.session_state:
    st.session_state["monthly_charges"] = None
if "total_charges" not in st.session_state:
    st.session_state["total_charges"] = None

# Create a DataFrame to store the prediction history
prediction_history = pd.DataFrame(columns=['Timestamp', 'Gender', 'Senior Citizen', 'Partner', 'Dependents', 'Tenure',
                                            'Phone Service', 'Multiple Lines', 'Internet Service', 'Online Security',
                                            'Online Backup', 'Device Protection', 'Tech Support', 'Streaming TV',
                                            'Streaming Movies', 'Contract', 'Paperless Billing', 'Payment Method',
                                            'Monthly Charges', 'Total Charges', 'Prediction'])

def load_forest_pipeline():
    pipeline = joblib.load("./models/Random_Forest.pkl")
    return pipeline

def load_XGBoost_pipeline():
    pipeline = joblib.load("./models/XGBoost.pkl")
    return pipeline

def select_model():
    col1, col2, col3,col4 = st.columns(4)

    with col1:
        user_choice = st.selectbox("Select a model to use", options=["XGBoostüöÄ", "Random Forestüå≤"], key="selected_model")
    with col2: 
        if user_choice == "XGBoostüöÄ":
            st.write("###### XGBoost MetricsüéØ‚ú®")
            st.metric(label= "PrecisionüéØ‚ú®", value="81%" )
        else: 
            st.write("##### Forest Metrics‚ú®")
            st.write(" ")
            st.metric(label= "PrecisionüéØ‚ú®", value="82.4%" )

    with col3:
        if user_choice == "XGBoostüöÄ":
            st.write(" ")
            st.write(" ")
            st.metric(label = "F1_score‚öñÔ∏è" , value="77.5%")
        else: 
            st.write(" ")
            st.write(" ")
            st.write(" ")
            st.write(" ")
            st.metric(label = "F1_score‚öñÔ∏è" , value="77%")

    with col4: 
        if user_choice == "XGBoostüöÄ":
            st.write(" ")
            st.write(" ")
            st.metric(label = "Optimal ThresholdüéöÔ∏è" , value="0.024")
        else :
            st.write(" ")
            st.write(" ")
            st.write(" ")
            st.write(" ")
            st.metric(label="Optimal ThresholdüéöÔ∏è", value="0.284")
        
    if st.session_state["selected_model"] == "XGBoostüöÄ":
        pipeline = load_XGBoost_pipeline()
    else: 
        pipeline = load_forest_pipeline()
        
    st.success("Model loaded successfully")
    encoder = joblib.load("./models/label_encoder.pkl")
    return pipeline, encoder

def make_prediction(pipeline, encoder):
    gender = st.session_state["Gender"]
    senior_citizen = st.session_state["senior_citizen"]
    partner = st.session_state["partner"]
    dependents = st.session_state["dependents"]
    tenure = st.session_state["tenure"]
    phone_service = st.session_state["phone_service"]
    multiple_lines = st.session_state["multiple_lines"]
    internet_service = st.session_state["internet_service"]
    online_security = st.session_state["online_security"]
    online_backup = st.session_state["online_backup"]
    device_protection = st.session_state["device_protection"]
    tech_support = st.session_state["tech_support"]
    streaming_tv = st.session_state["streaming_tv"]
    streaming_movies = st.session_state["streaming_movies"]
    contract = st.session_state["contract"]
    paperless_billing = st.session_state["paperless_billing"]
    payment_method = st.session_state["payment_method"]
    monthly_charges = st.session_state["monthly_charges"]
    total_charges = st.session_state["total_charges"]

    data = [[gender, senior_citizen, partner, dependents, tenure, phone_service, multiple_lines, 
             internet_service, online_security, online_backup, device_protection, tech_support, streaming_tv, streaming_movies, 
             contract, paperless_billing, payment_method, monthly_charges, total_charges]]
    
    columns = [
        "Gender", "Senior Citizen", "Partner", "Dependents", "Tenure", "Phone Service",
        "Multiple Lines", "Internet Service", "Online Security", "Online Backup", "Device Protection",
        "Tech Support", "Streaming TV", "Streaming Movies", "Contract", "Paperless Billing",
        "Payment Method", "Monthly Charges", "Total Charges"
    ]

    df = pd.DataFrame(data, columns=columns)

    pred = pipeline.predict(df)
    pred_int = int(pred[0])
    prediction = encoder.inverse_transform([pred_int])
    probability = pipeline.predict_proba(df)

    # Record the prediction in the prediction history DataFrame
    timestamp = datetime.now()
    record = pd.DataFrame([[timestamp, gender, senior_citizen, partner, dependents, tenure, phone_service,
                            multiple_lines, internet_service, online_security, online_backup, device_protection,
                            tech_support, streaming_tv, streaming_movies, contract, paperless_billing,
                            payment_method, monthly_charges, total_charges, prediction[0]]],
                          columns=["Timestamp", "Gender", "Senior Citizen", "Partner", "Dependents", "Tenure",
                                   "Phone Service", "Multiple Lines", "Internet Service", "Online Security",
                                   "Online Backup", "Device Protection", "Tech Support", "Streaming TV",
                                   "Streaming Movies", "Contract", "Paperless Billing", "Payment Method",
                                   "Monthly Charges", "Total Charges", "Prediction"])
    global prediction_history
    prediction_history = prediction_history.append(record, ignore_index=True)

    # Display the prediction history
    st.write("## Prediction History")
    st.write(prediction_history)

if __name__ == "__main__":
    pipeline, encoder = select_model()
    make_prediction(pipeline, encoder)

